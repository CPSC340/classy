# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.9.0
      - image: circleci/mongo:3.6

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/project

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: yarn install --ignore-engines

      - run:
            command: cd packages/common && yarn install --ignore-engines
            name: Preparing common

      - run:
            command: cd packages/autotest && yarn install --ignore-engines
            name: Preparing autotest

      - run:
            command: cd packages/portal/backend && mkdir -p ssl/ && yarn install --ignore-engines
            name: Preparing backend

      - save_cache:
          paths:
            - node_modules
#            - packages/common/node_modules
#            - packages/portal-backend/node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: "Setup encrypted .env variable per Classy fork (chooses default env.enc when not set)"
          command: |
            echo 'export ENV_ENC_FILE="${ENCRYPT_ENV:-env}"' >> $BASH_ENV # Redirect ENCRYPT_ENV into $BASH_ENV

     # openssl aes-256-cbc -e -md sha512 -in ../.env -out .config -k $KEY
      - run:
            command: cd .circleci && openssl aes-256-cbc -d -md sha512 -in "$ENV_ENC_FILE.enc" -out ../.env -k $ENVKEY
            name: Configuring .env
            when: always

      - run:
            command: cd .circleci && mkdir -p ../packages/portal-backend/ssl && openssl aes-256-cbc -d -md sha512 -in fullchain.enc -out ../packages/portal/backend/ssl/fullchain.pem -k $ENVKEY
            name: Configuring SSL-1
            when: always

      - run:
            command: cd .circleci && openssl aes-256-cbc -d -md sha512 -in privkey.enc -out ../packages/portal/backend/ssl/privkey.pem -k $ENVKEY
            name: Configuring SSL-2
            when: always

      - run:
            command: cd packages/common && ../../node_modules/typescript/bin/tsc
            name: Building common
            when: always

      - run:
            command: cd packages/portal/backend && ../../../node_modules/typescript/bin/tsc
            name: Building backend
            when: always

      - run:
            command: cd packages/portal/frontend && ../../../node_modules/typescript/bin/tsc && yarn webpack
            name: Building frontend and bundle with Webpack
            when: always

      # statically validate the frontend (this is the best we can do as there are no automated UI tests yet)
#      - run:
#            command: cd packages/portal/frontend && ../../../node_modules/typescript/bin/tsc && ../../../node_modules/webpack/bin/webpack.js
#            name: Building frontend
#            when: always

      - run:
            command: cd packages/autotest && ../../node_modules/typescript/bin/tsc
            name: Building autotest
            when: always

      - run:
            command: yarn run lint
            name: Linting project
            when: always

      - run:
            command: git config --global user.email "CI@test.com" && git config --global user.name "CI Test Name"
            name: Configure local git
            when: on_success

      - run:
            command: |
                      set -e
                      cd packages/portal/backend
                      yarn coverCI
            name: Running backend tests
            environment:
              MOCHA_FILE: testOutput/backend/test/test-results.xml
            when: on_success

      - run:
            command: mkdir -p testOutput/backend/test/ && ./node_modules/junit-viewer/bin/junit-viewer --results=packages/portal/backend/testOutput/backend/test/test-results.xml --save=testOutput/backend/test/index.html
            name: Converting backend test results to HTML
            when: on_success

      - run:
            command: |
                      set -e
                      cd packages/autotest
                      yarn coverCI
            name: Running autotest tests
            environment:
              MOCHA_FILE: testOutput/autotest/test/test-results.xml
            when: on_success

      - run:
            command: mkdir -p testOutput/autotest/test/ && ./node_modules/junit-viewer/bin/junit-viewer --results=packages/autotest/testOutput/autotest/test/test-results.xml --save=testOutput/autotest/test/index.html
            name: Converting autotest test results to HTML
            when: on_success

      - run:
            command: cd packages/portal/backend && yarn coveralls
            name: Running backend coveralls
            when: on_success
# coveralls doesn't integrate coverage
# so this overwrites the backend coverage (which we care about more)
# this is disabled and shouldn't be enabled until this is fixed
#      - run:
#            command: cd packages/autotest && yarn coveralls
#            name: Running autotest coveralls
#            when: always

      - run:
            command: cd packages/portal/backend && yarn codecov
            name: Running backend codecov
            when: on_success

      - store_test_results:
          path: testOutput

      - store_artifacts:
          path: testOutput

      - run:
            command: rm .env && rm packages/portal/backend/ssl/fullchain.pem && rm packages/portal/backend/ssl/privkey.pem
            name: Cleaning up
            when: always

  docker_build:
    docker:
      # using custom image, see .circleci/images/primary/Dockerfile
      - image: circleci/cci-demo-docker-primary:0.0.2
    working_directory: ~/project

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: "Setup encrypted .env variable per Classy fork (chooses default env.enc when not set)"
          command: |
            echo 'export ENV_ENC_FILE="${ENCRYPT_ENV:-env}"' >> $BASH_ENV # Redirect ENCRYPT_ENV into $BASH_ENV

     # openssl aes-256-cbc -e -md sha512 -in ../.env -out .config -k $KEY
      - run:
            command: cd .circleci && openssl aes-256-cbc -d -md sha512 -in "$ENV_ENC_FILE.enc" -out ../.env -k $ENVKEY
            name: Configuring .env
            when: always

     # CircleCI runs in root, which is 0 for UID & GID. Must do after file encrypted.
      - run:
          name: "Export UID and GID to configuration file"
          command: echo -e "GID=0\nUID=0\n" >> .env

     # SSLs needed to build Portal container or else misleading "volume name is too short" Docker create error
      - run:
          name: "Export UID and GID to configuration file"
          command: echo -e "HOST_SSL_CERT_PATH=~/project/ssl/fullchain.pem\nHOST_SSL_KEY_PATH=~/project/ssl/privkey.pem\n" >> .env

      - run:
          command: cd .circleci && mkdir -p ~/project/ssl && openssl aes-256-cbc -d -md sha512 -in fullchain.enc -out ~/project/ssl/fullchain.pem -k $ENVKEY
          name: Configuring SSL-1
          when: always

      - run:
          command: cd .circleci && openssl aes-256-cbc -d -md sha512 -in privkey.enc -out ~/project/privkey.pem -k $ENVKEY
          name: Configuring SSL-2
          when: always

      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose up -d
            # docker-compose will start 2 containers, the one with service will be named `contacts`
            # we start another container with curl in the same network as `contacts`, this way we have
            # all exposed ports from `contacts` available on `localhost` in this new container
            # docker run --network container:contacts \
            #   appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test

      - run:
          command: rm .env && rm ~/project/ssl/fullchain.pem && rm ~/project/ssl/privkey.pem && docker system prune -af
          name: Cleaning up
          when: always

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results
workflows:
  version: 2
  docker_compose_build:
    jobs:
      - docker_build

#####
##### Sample Classy Configuration
#####
##### NEVER NEVER NEVER commit your .env to version control. 
##### GitHub monitors these and if it sees tokens in the repo it will
##### automatically invalidate them and your course _will_ break.
#####

#####
#####
##### Core Settings
#####
#####

## Name of the org (e.g., cs310, cs340, sdmm, classytest)
NAME=cs310

## GitHub org identifier for the course (e.g., CS310-2017Jan, classytest)
## This org must have a team called admin and a team called staff manually
## created inside it.
ORG=CS310-2017Jan

## GitHub org identifier for the test organization (you probably do not want to change this)
ORGTEST=classytest

## Course name for the test instance (you probably do not want to change this)
NAMETEST=classytest


#####
#####
##### Host configs for portal-backend and portal-frontend; no trailing slash
##### https://localhost is usually used for both the frontend and backend url
#####
#####

## URL (no trailing slash) for Classy frontend
FRONTEND_URL=https://localhost
FRONTEND_PORT=3000

## URL (no trailing slash) for Classy backend
BACKEND_URL=https://localhost
BACKEND_PORT=5000

## Full path to fullchain.pem (Can be self-signed for localhost testing)
SSL_CERT_PATH=/DEVPATH/classy/packages/portal-backend/ssl/fullchain.pem
## Full path to privkey.pem (Can be self-signed for localhost testing)
SSL_KEY_PATH=/DEVPATH/classy/packages/portal-backend/ssl/privkey.pem


#####
#####
##### Mongo Configuration
#####
#####

## Should encode user/pass in the url too
## To spin something simple up with Docker for testing you can do something like:
## docker run -p 27017:27017 mongo
DB_URL=mongodb://localhost:27017


#####
#####
##### GitHub Configuration
#####
#####

## GitHub API host (no trailing slash). This is because the API host is often different than the web host.
## For public github it will be: https://api.github.com
GH_API=https://api.github.com

## GitHub Web root (no trailing slash)
## For public GitHub it will be https://github.com
GH_HOST=https://github.com

## The name of the GitHub bot account the students will call
## You must have access to this account because it needs to be 
## added to both the admin and staff teams so it can admin and 
## comment on repos. Do not include the @ in the username.
## The bot needs to be added to your org with admin privileges
## e.g., for public GitHub here: https://github.com/orgs/ORGNAME/people
GH_BOT_USERNAME=ubcbot

## A GitHub token so the bot can use the GitHub API without going
## through authentication. It is important that this token be well
## protected as without it you can lose programmatic access to student
## projects. The format should be:
## GH_BOT_TOKEN=token d4951x.... 
## (yes the word token is required)
## If you want to use ubcbot, contact Reid Holmes for a token.

GH_BOT_TOKEN=token d4951x...


## Before you can authenticate against GitHub you will need to create
## two OAuth applications on the org; e.g., for public GitHub you can 
## do this here: https://github.com/organizations/ORGNAME/settings/applications
## 
## For Testing, create one with an Authorization callback URL similar to:
## https://localhost:5000/portal/authCallback?orgName=ORGNAME
## For Production, create another with your production backend host:
## e.g., https://sdmm.cs.ubc.ca:5000/portal/authCallback?orgName=ORGNAME
##
## The Client ID and Client Secret for the OAuth profile (testing or prod)
## you intend to use should be included below. These _must_ be protected.

GH_CLIENT_ID=f42b49hut...
GH_CLIENT_SECRET=1337secretTokenCharsHere...


#####
#####
#####
##### AutoTest Settings (Nick will decide what is needed and what can go)
#####
#####
#####

## When using docker-compose, an entry is added to the hosts file for each
## dependent service. Thus, we just need to specify the service name in the URL.
AUTOTEST_URL=http://localhost

## AutoTest instance port. 
AUTOTEST_PORT=11333

## Password used for Classy backend to make sure results being posted are from
## valid grader instances.
AUTOTEST_SECRET=longRandomString

## Whether the bot will postback results to commits (usually false when debugging)
AUTOTEST_POSTBACK=false

## ?
GRADER_PORT_SOCK=7777

## ?
GRADER_DOCKER_ID=cpsc310image

## ?
GRADER_WORKSPACE=/var/tmp/test/

## ?
GRADER_HOST_DIR=./data/runs

## ?
GRADER_PERSIST_DIR=/DEVPATH/classy/packages/autotest/test/data

## Seconds until container is forcefully killed
GRADER_TIMEOUT=300

